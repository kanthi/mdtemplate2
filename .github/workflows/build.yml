# GitHub Actions workflow to build mdBook documentation and package it for download
# This workflow will build all books in directories matching the pattern [0-9][0-9]_book*
# and create downloadable zip archives for each built book
# Status: [![Build and Package Books](https://github.com/$OWNER/$REPO/actions/workflows/build.yml/badge.svg)](https://github.com/$OWNER/$REPO/actions/workflows/build.yml)

name: Build and Package Books

# Define when this workflow will run
on:
  push:
    branches: [ main, master ]  # Run on pushes to main or master branch
  pull_request:
    branches: [ main, master ]  # Run on PRs targeting main or master
  workflow_dispatch:           # Allow manual trigger from GitHub UI

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest    # Use Ubuntu as our build environment
    outputs:
      build_status: ${{ steps.build_step.outputs.status }}

    steps:
    # Check out the repository code
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install Rust toolchain
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
        
    # Cache cargo dependencies to speed up builds
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    # Install mdBook and required plugins
    - name: Install mdBook and plugins
      run: |
        if ! command -v mdbook &> /dev/null; then
          cargo install mdbook --locked --no-default-features --features search
        fi
        if ! command -v mdbook-epub &> /dev/null; then
          cargo install mdbook-epub --locked
        fi

    # Ensure build script has execute permissions
    - name: Make build script executable
      run: chmod +x build.sh

    # Run the build script that processes all book directories
    - name: Build books
      id: build_step
      run: |
        ./build.sh
        echo "status=success" >> $GITHUB_OUTPUT

    # Create zip archives for each built book
    # This step packages the HTML output from mdBook into separate zip files
    - name: Package books
      if: success()
      run: |
        mkdir artifacts
        for book in [0-9][0-9]_book*/; do
          if [ -d "$book/book" ]; then
            zip -r "artifacts/$(basename $book).zip" "$book/book"
          fi
        done
        if [ -d "master/book" ]; then
          zip -r artifacts/master.zip master/book
        fi

    # Upload the zip files as workflow artifacts
    # These will be available for download from the GitHub Actions interface
    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: books
        path: artifacts/*.zip
        retention-days: 30     # Keep artifacts for 30 days
